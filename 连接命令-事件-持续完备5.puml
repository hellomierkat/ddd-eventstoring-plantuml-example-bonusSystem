@startuml

!include ./libs-plantuml.puml

' Domain events:

' 奖金文件已上传

DomainEvent('Event_BonusFileUploaded')[
        奖金文件已上传
        --
        文件标题
        文件有效的开始时间
        文件有效的截至时间
        至少一个媒体文件
]

' 内容已创建
' 内容已启用
' 内容已禁用

DomainEvent('Event_ContentCreated')[
        内容已创建
        --
        内容名称
        内容大类
        内容小类
        规则
        创建模板是否默认勾选 flag
        内容来源
        备注
]

DomainEvent('Event_ContentEnabled')[
        内容已启用
        --
        内容
]

DomainEvent('Event_ContentUnabled')[
        内容已禁用
        --
        内容
]

' 模板已创建
' 模板草稿已创建
' 模板已启用
' 模板已禁用
' 模板已删除
' 模板截至时间已设置

DomainEvent('Event_TemplateCreated')[
        模板已创建
        --
        内容集合（可设置别名，用于显示）
        模板名称
        模板描述
        当月发放开始时间
        当月发放截至时间
        是否启用模板 flag
        是否开启附件 flag
]

DomainEvent('Event_TemplateDraftCreated')[
        模板草稿已创建
        --
        内容集合（可设置别名，用于显示）
        模板名称
        模板描述
        当月发放开始时间
        当月发放截至时间
        是否启用模板 flag
        是否开启附件 flag
]

DomainEvent('Event_TemplateEnabled')[
        模板已启用
        --
        模板
]

DomainEvent('Event_TemplateUnabled')[
        模板已禁用
        --
        模板
]

DomainEvent('Event_TemplateDeleted')[
        模板已删除
        --
        模板
]

DomainEvent('Event_TemplateFinishTimeSeted')[
        模板截至时间已设置
        --
        模板
]


' 申请单已申请
' 申请单已分配
' 申请单已通过
' 申请单已拒绝
' 申请单子项已通过
' 申请单子项已拒绝
' 申请单已锁定
' 申请单已解锁
' 申请单已终审
' 申请单附件已补充
' 人员委托状态已设置
' 人员委托状态已撤销
' 申请单已委托
' 申请单委托已撤销
' 申请单已撤销

DomainEvent('Event_ApplyCreated')[
        申请单已申请
        --
        自定义名称
        自定义归属年月
        模板对于内容集内容
        审批人集合（含工号）
]

DomainEvent('Event_ApplyDistributed')[
        申请单已分配
        --
        申请单
]

DomainEvent('Event_ApplyPassed')[
        申请单已通过
        --
        申请单
        通过理由
]

DomainEvent('Event_ApplyRejected')[
        申请单已拒绝
        --
        申请单
        拒绝理由
]

DomainEvent('Event_ApplyItemPassed') [
        申请单子项已通过
        --
        申请单
        申请单子项
]

DomainEvent('Event_ApplyItemRejected')[
        申请单子项已拒绝
        --
        申请单
        申请单子项
]

' DomainEvent('Event_ApplyTrans2Next')[
'         申请单已转交审批员
'         --
'         申请单
' ]

' DomainEvent('Event_ApplyTrans2HR')[
'         申请单已转交HR
'         --
'         申请单
' ]

DomainEvent('Event_ApplyLocked')[
        申请单已锁定
        --
        申请单
]

DomainEvent('Event_ApplyUnlocked')[
        申请单已解锁
        --
        申请单
]

DomainEvent('Event_ApplyCompleted')[
        申请单已终审
        --
        发放月份
        文件所属
        分类所属
        终审意见
]

DomainEvent('Event_ApplyFileReloaded')[
        申请单附件已补充
        --
        申请单
        附件文件
]

DomainEvent('Event_EntrustmentSetted') [
        人员委托已设置
]

DomainEvent('Event_EntrustmentCanceled') [
        人员委托已撤销
]

DomainEvent('Event_ApplyDeputed')[
        申请单已委托
]

DomainEvent('Event_ApplyDeprived') [
        申请单委托已撤销
]

DomainEvent('Event_ApplyCancelled')[
        申请单已撤销
        --
        申请单
]



' Commands:

' 上传奖金文件

Command('Command_UploadBonusFile')[
        上传奖金文件
        --
        标题
        有效起止时间
        文件集合
        -- rules --
        1, 标题必填
        2, 起止时间必填
        3, 图片至少一个, 且每张图大小不能超过3M
]

' 创建内容
' 启用内容
' 禁用内容

Command('Command_CreateContent')[
        创建内容
        --
        名称
        大类/小类/规则
        创建是否默认勾选
        内容来源
        备注
        -- rules --
        1, 名称、类型、创建勾选、内容来源必填
        2, 创建后默认未启用状态
        3, 创建后不可编辑
]

Command('Command_EnableContent')[
        启用内容
        --
        内容
        -- rules --
        1, 内容为非启用状态
]

Command('Command_UnableContent')[
        禁用内容
        --
        内容
        -- rules --
        1, 内容为启用状态
]


' 创建模板
' 创建模板草稿
' 设置模板截至时间
' 批量设置模板截至时间
' 启用模板
' 禁用模板
' 删除模板

Command('Command_CreateTemplate')[
        创建模板
        --
        内容集合
        模板名称
        模板描述
        当月发放截止时间
        是否启用模板
        是否开启附件
        -- rules --
        1, 内容集合都为启用状态
        2, 模板名称必填
        3, 模板描述选填
        4, 当月发放截止时间必填
        5, 是否启用模板 默认【不启用】
        6, 是否开启附件 默认【启用】
]

Command('Command_CreateTemplateDraft') [
        创建模板草稿
        --
        内容集合
        模板名称
        模板描述
        当月发放截止时间
        是否启用模板
        是否开启附件
        -- rules --
        1, 内容集合都为启用状态
        2, 模板名称必填
        3, 模板描述选填
        4, 当月发放截止时间必填
        5, 是否启用模板 默认【不启用】
        6, 是否开启附件 默认【启用】
]

Command('Command_SetTemplateFinishTime')[
        设置模板截至时间
        --
        模板
        -- rules --
        1, 允许设置的模板的状态为【启用/禁用】
        2, 不影响该模板下已生成的数据
]

' 已删除
' Command('Command_SetTemplateFinishTimeBatch')[
'         批量设置模板截至时间
'         --
'         模板列表
'         -- rules --
'         1, 允许设置的模板的状态为【启用/禁用】
'         2, 不影响该模板下已生成的数据
' ]

Command('Command_EnableTemplate')[
        启用模板
        --
        模板
        -- rules --
        1, 模板状态为禁用
]

Command('Command_UnableTemplate')[
        禁用模板
        --
        模板
        -- rules --
        1, 模板状态为启用
]

Command('Command_DeleteTemplate')[
        删除模板
        --
        模板
        -- rules --
        1, 模板未产生任何的数据可删除
]

' 创建申请单
' 撤销申请单
' 通过申请单
' 拒绝申请单
' 通过申请单子项
' 拒绝申请单子项
' 锁定申请单
' 解锁申请单
' 补充附件
' 完结申请单
' 设置委托
' 撤销委托

Command('Command_CreateApply')[
        创建申请单
        --
        自定义名称（用于用户自己觉得该奖金是什么名字，同时管控由于模板名称修改造成的理解误差）
        归属年月（用于用户自觉得本次申请的奖金归属年月，方便后续统计）
        内容列表
        审批人列表（将会按照顺序依次审批）
        -- rules --
        1, 申请的奖金模板为启用状态
        2, 自定义名称必填
        3, 归属年月必填
        4, 审批人至少填写一个
        5, 要求附件的模板, 附件必填
]


Command('Command_CancelApply') [
        撤销申请单
        --
        申请单
        -- rules --
        1, 操作人必须为申请单本人
        2, 申请单必须没有被审核员审核过
]

' 已补充
' Command('Command_PassApply')[
'         通过申请单
'         --
'         申请单
'         -- rules --
'         1, 审批意见必填
'         2, 操作人为当前审批员 （或委托对象）
'         3, 最后一个审批员操作后, 申请单状态转为【等待HR审核状态】
' ]

' Command('Command_RejectApply')[
'         拒绝申请单
'         --
'         申请单
'         -- rules --
'         1, 审批意见必填
'         2, 操作人为当前审批员 （或委托对象）
'         3, 任意一个审批员操作后，申请单将被拒绝，该申请单最终状态将设置为【拒绝】
' ]

Command('Command_PassApplyItem') [
        通过申请单子项
        --
        申请单
        申请单子项
        -- rules --
        1, 操作人角色需HR(或其委托对象)
        2, 操作前状态需要为 无/拒绝 状态
        3, 可多次进行本操作
        4, 初次操作，申请单将被设置为锁定状态
]

Command('Command_RejectApplyItem') [
        拒绝申请单子项
        --
        申请单
        申请单子项
        -- rules --
        1, 操作人角色需HR(或其委托对象)
        2, 操作前状态需要为 无/通过 状态
        3, 可多次进行本操作
        4, 初次操作，申请单将被设置为锁定状态
]

' 已删除
' Command('Command_LockApply')[
'         锁定申请单
'         --
'         申请单
'         -- rules --
'         1, 操作员角色为HR
'         2, 申请单状态为未锁定
' ]

Command('Command_UnlockApply')[
        解锁申请单
        --
        申请单
        -- rules --
        1, 操作员角色为HR
        2, 申请单状态为已锁定
        3, 操作人需非委托状态
]

Command('Command_ReloadApplyFile')[
        补充附件
        --
        申请单
        附件文件
        -- rules --
        1, 操作员为申请人
        2, 申请单状态为【等待补充附件】
]


Command('Command_CompleteApply')[
        完结申请单
        --
        申请单
        --
        1, 操作员必须为HR
        2, 操作前HR必须对象申请单进行通过/拒绝操作
        3, 选择奖金发放月
        4, 选择公司发布的文件归属（文件管理）
        5, 选择分类所属
        6, 必填审批意见
]

Command('Command_SetEntrustment') [
        设置委托
        --
        操作人
        目标
        委托人
        （操作人设置目标的委托人）
        -- rules --
        1, 操作人需要是审批员或HR, 自己可以设置自己的状态, HR可设置审批员的委托, 不可出现同级相互设置
        2, 目标目前不能是委托状态
        3, 委托人不能是委托状态
        4, 目标和委托人不能是同一个人
        5, 设置目标委托后，目标持有的所有单，将暂时交由委托人处理
        6, 新增委托记录，格式：[yyyy-MM-dd hh:mm] 目标A将本单委托给委托人A', 等待A'进行审批
]

Command('Command_CancelEntrustment') [
        撤销委托
        --
        操作人
        目标
        --
        1, 操作人需要是审批员或HR, 自己可以设置自己的状态, HR可设置审批员的委托, 不可出现同级相互设置
        2, 目标需要是委托状态
        3, 撤销委托后，被委托的且处于持有状态的申请单将交由目标持有
        4, 重新持有的申请单将新增记录：格式：[yyyy-MM-dd hh:mm] 目标A取消本单的委托, 等待A进行审批
]


Person('Person_User') [
        用户
]

Person('Person_Auditor') [
        审核人
]

Person('Person_HR') [
        HR
]

Person('Person_Admin') [
        管理员
]




' HR上传奖金文件
Person_HR -down-> Command_UploadBonusFile
Command_UploadBonusFile -down-> Event_BonusFileUploaded

' HR创建内容
Person_HR -down-> Command_CreateContent
Command_CreateContent -down-> Event_ContentCreated

' HR启用内容
Person_HR -down-> Command_EnableContent
Command_EnableContent -down-> Event_ContentEnabled

' HR禁用内容
Person_HR -down-> Command_UnableContent
Command_UnableContent -down-> Event_ContentUnabled

' HR创建模板
Person_HR -down-> Command_CreateTemplate
Command_CreateTemplate -down-> Event_TemplateCreated

' HR创建模板草稿
Person_HR -down-> Command_CreateTemplateDraft
Command_CreateTemplateDraft -down-> Event_TemplateDraftCreated

' HR设置模板截至时间
Person_HR -down-> Command_SetTemplateFinishTime
Command_SetTemplateFinishTime -down-> Event_TemplateFinishTimeSeted

' HR批量设置模板截至时间 ->  与【设置单个模板截至时间】并无差异（仅仅设置时间这一个因素，当前不做差异化批量修改），故【批量设置模板截至时间】属于识别错误

' HR启动模板
Person_HR -down-> Command_EnableTemplate
Command_EnableTemplate -down-> Event_TemplateEnabled

' HR禁用模板
Person_HR -down-> Command_UnableTemplate
Command_UnableTemplate -down-> Event_TemplateUnabled

' HR删除模板
Person_HR -down-> Command_DeleteTemplate
Command_DeleteTemplate -down-> Event_TemplateDeleted


' 用户创建申请单，申请单自动分配
' （存在自动分配policy，审核员如果是委托状态，将触发申请单委托）。 此时我们发现遗漏的【申请单已委托】事件、【分配申请单】命令和新存在的自动分配policy
' 当前引入【负责分配的policy】，它将负责检查申请单状态和将分配的审核人状态。 后续业务状态变化，也可以在策略中添加机制进行扩展。为往后业务扩展性、健壮性提供支持。

Policy('Policy_AutoDistributeAuditor') [
        申请单自动分配审核人策略
]

Command('Command_DistributeAuditor') [
        分配申请单
]

Person_User -down-> Command_CreateApply
Command_CreateApply -down-> Event_ApplyCreated
Event_ApplyCreated -down-> Policy_AutoDistributeAuditor
Policy_AutoDistributeAuditor -down-> Command_DistributeAuditor
Command_DistributeAuditor -down-> Event_ApplyDistributed

' 在上面5行时间流中，我们认为【申请单已创建】在【申请单已分配】后， 这里也可以认为【需要先进行分配再进行创建完成】。
' 为何要如此设计？
' 1，用户是由可见的资源而做出的申请决策，API在后端校验通过后可立即通过该请求，用户关心的已经结束。
' 2，【分配行为】可由系统异步调度完成，且分配存在policy，其变化性较大。（例如以后xx部门申请的奖金需要调用其他部门的yy系统来判定审核人）


' 用户撤销申请单
Person_User -down-> Command_CancelApply
Command_CancelApply -down-> Event_ApplyCancelled


' 此时发现没有【全部审批员都通过后】的业务场景，这里需要等待HR对申请单进行操作才会拿到该申请单的审批所有权
' 此时发现没有【操作记录】的相关描述，需要添加【Event_OperationLogCreated 操作记录已生成】事件
' 添加事件 【Event_AllAutitorsPassed 全体审批员已通过】 或 【等待HR处理事件】。 这里倾向于选择前者，因为它是当前的事实，而【等待HR处理】可能不会发生

' 此时，我们可能会考虑将不同角色的相同操作记录到【命令】/【Policy策略】上， 我们可以从以下几点基础为决策提供依据：
' 1，【命令】描述的是行为，需要关注【描述完整性】
' 2，【策略】描述的非聚合的业务，它是可替换的

' 所以，我们需要对【命令】进行补充，而Policy保持原样。


' 全体审批员已通过 （新增）
DomainEvent('Event_AllAutitorsPassed') [
        全体审批员已通过
        --
        申请单
]

DomainEvent('Event_OperationLogCreated') [
        操作记录已生成
        --
        申请单
]


' 命令补充
Command('Command_PassApply')[
        通过申请单
        --
        申请单
        -- rules --
        1, 审批意见必填
        2, 操作人为当前审批员 （或委托对象）
        3, 最后一个审批员操作后, 申请单状态转为【等待HR审核状态】
        4, 操作人不是最后一名审批员时, 申请根据【policy】自动分配到下一个审批员
        5, 操作需要生成操作记录，格式[yyyy-MM-dd hh:mm] x角色 工号/姓名 对本单进行[通过]操作，理由：[审批意见]
]

Command('Command_RejectApply')[
        拒绝申请单
        --
        申请单
        -- rules --
        1, 审批意见必填
        2, 操作人为当前审批员 （或委托对象）
        3, 任意一个审批员操作后，申请单将被拒绝，该申请单最终状态将设置为【拒绝】
        4, 操作需要生成操作记录，格式[yyyy-MM-dd hh:mm] x角色 工号/姓名 对本单进行[拒绝]操作，理由：[审批意见]
]

' 审批员通过申请单
Person_Auditor -down-> Command_PassApply
Command_PassApply -down-> Event_ApplyPassed
Command_PassApply -down-> Event_OperationLogCreated
' 触发自动分配
Event_ApplyPassed -down-> Policy_AutoDistributeAuditor
Policy_AutoDistributeAuditor -down-> Command_DistributeAuditor
Command_DistributeAuditor -down-> Event_ApplyDistributed
' 触发等待HR审核
Command_PassApply -down-> Event_AllAutitorsPassed


' 审批员拒绝申请单
Person_Auditor -down-> Command_RejectApply
Command_RejectApply -down-> Event_ApplyRejected
Command_RejectApply -down-> Event_OperationLogCreated



' HR通过申请单子项
Person_HR -down-> Command_PassApplyItem
Command_PassApplyItem -down-> Event_ApplyItemPassed
Command_PassApplyItem -down-> Event_ApplyLocked
' 操作需要生成操作记录，格式[yyyy-MM-dd hh:mm] x角色 工号/姓名 对本单进行[锁定]操作
Command_PassApplyItem -down-> Event_OperationLogCreated


' HR拒绝申请单子项
Person_HR -down-> Command_RejectApplyItem
Command_RejectApplyItem -down-> Event_ApplyItemRejected
Command_RejectApplyItem -down-> Event_ApplyLocked
' 操作需要生成操作记录，格式[yyyy-MM-dd hh:mm] x角色 工号/姓名 对本单进行[解锁]操作
Command_RejectApplyItem -down-> Event_OperationLogCreated

' HR解锁申请单
Person_HR -down-> Command_UnlockApply
Command_UnlockApply -down-> Event_ApplyUnlocked
' 解锁后回到【全部审批员申请完成状态】
Command_UnlockApply -down-> Event_AllAutitorsPassed
Command_UnlockApply -down-> Event_OperationLogCreated

' 用户补充附件
Person_User -down-> Command_ReloadApplyFile
Command_ReloadApplyFile -down-> Event_ApplyFileReloaded

' HR完结申请单
Person_HR -down-> Command_CompleteApply
Command_CompleteApply -down-> Event_ApplyCompleted
Command_CompleteApply -down-> Event_OperationLogCreated

' 审批员设置委托
Person_Auditor -down-> Command_SetEntrustment
Command_SetEntrustment -down-> Event_EntrustmentSetted
Command_SetEntrustment -down-> Event_ApplyDeputed

' 审批员取消委托
Person_Auditor -down-> Command_CancelEntrustment
Command_CancelEntrustment -down-> Event_EntrustmentCanceled
Command_CancelEntrustment -down-> Event_ApplyDeprived

' HR设置委托
Person_HR -down-> Command_SetEntrustment
Command_SetEntrustment -down-> Event_EntrustmentSetted
Command_SetEntrustment -down-> Event_ApplyDeputed

' HR取消委托
Person_HR -down-> Command_CancelEntrustment
Command_CancelEntrustment -down-> Event_EntrustmentCanceled
Command_CancelEntrustment -down-> Event_ApplyDeprived



' 识别到此，极多的严谨的我们发现：
' 1,事件【申请单已转交审批员】【申请单已转交HR】是识别错误的， 故需要删除
' 2,命令【批量设置模板截止时间】【锁定申请单】是识别错误的，故需要删除
' 2, 审批员或HR设置委托后，委托在审批员阶段和HR阶段是不一致的， 审批员是整个申请单的操作， 而HR阶段存在子项的操作
        ' 2.1 委托后子项的操作是否保留还未决定，且终审后整个单的状态存在三种可能【全部通过、全部拒绝、部分通过】，这里未描述
' 3, 业务日志需要细致设计（申请人需要知道其流程），其来源包含：
        ' 3.1 【审批员】审批员通过、审批员拒绝、审批员委托、审批员取消委托
        ' 3.2 【HR】HR锁定、HR委托、HR终审、HR解锁、HR标记需上传附件、申请人上传附件
' 4, 角色变化，其持有单未处理
' 5, 申请人虽然能看到细节流程，但系统没有主动提醒
' 6, 系统没有对持有时间较长的申请单进行处理



' 此刻，我们完成了：
        ' - 不存在事件和命令孤岛，已知事件和命令的连接
        ' - 英文定义业务，减小了歧义
        ' - 对部分问题的识别


' 我需要对所形成的图进行分析：

        ' - 当然也可以把为考虑到的细节进行完结后，再来分析图， 不过，此时是推荐优先对图进行分析，理由如下：
                ' 1 此时得到的信息是由各方共同识别得到的信息，此刻对已知信息进行处理是有基础的，且不会新增其他知识负担
                ' 2 先分析此时的结构，将获取更多的机会点，扫除盲区，达成更多的共识
                ' 3 此刻优先得到的细节可能会和后续的更新形成冲突

        ' 分析图我们总结一些知识：
                ' 1 HR 需要操作的事情极多， 审批员较少，管理员角色无用
                ' 2 内容和模板存在专业性， 是否可以交由其他角色执行
                ' 3 命令-层级层级不高，如果层级过多则需要纳入重点考虑, 因为高层级的任意改动，都可能将业务逻辑改写


' 事情到此处，我们可以进行中场休息。 不要将【事件风暴建模】变成【头脑风暴建模】
' 建议到第二天或间隔几天再次进行会议，组内进行沟通， 并将此文档生成pdf或图片进行分发
' 【第二次事件建模】将在此文件基础创建新文件进行



@enduml