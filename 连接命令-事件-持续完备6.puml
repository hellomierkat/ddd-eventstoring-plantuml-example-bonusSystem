@startuml

!include ./libs-plantuml.puml


' 识别到此，极多的严谨的我们发现：
' 1,事件【申请单已转交审批员】【申请单已转交HR】是识别错误的， 故需要删除
' 2,命令【批量设置模板截止时间】【锁定申请单】是识别错误的，故需要删除
' 2, 审批员或HR设置委托后，委托在审批员阶段和HR阶段是不一致的， 审批员是整个申请单的操作， 而HR阶段存在子项的操作
        ' 2.1 委托后子项的操作是否保留还未决定，且终审后整个单的状态存在三种可能【全部通过、全部拒绝、部分通过】，这里未描述
' 3, 业务日志需要细致设计（申请人需要知道其流程），其来源包含：
        ' 3.1 【审批员】审批员通过、审批员拒绝、审批员委托、审批员取消委托
        ' 3.2 【HR】HR锁定、HR委托、HR终审、HR解锁、HR标记需上传附件、申请人上传附件
' 4, 角色变化，其持有单未处理
' 5, 申请人虽然能看到细节流程，但系统没有主动提醒
' 6, 系统没有对持有时间较长的申请单进行处理



' 此刻，我们完成了：
        ' - 不存在事件和命令孤岛，已知事件和命令的连接
        ' - 英文定义业务，减小了歧义
        ' - 对部分问题的识别


' 我需要对所形成的图进行分析：

        ' - 当然也可以把为考虑到的细节进行完结后，再来分析图， 不过，此时是推荐优先对图进行分析，理由如下：
                ' 1 此时得到的信息是由各方共同识别得到的信息，此刻对已知信息进行处理是有基础的，且不会新增其他知识负担
                ' 2 先分析此时的结构，将获取更多的机会点，扫除盲区，达成更多的共识
                ' 3 此刻优先得到的细节可能会和后续的更新形成冲突

        ' 分析图我们总结一些知识：
                ' 1 HR 需要操作的事情极多， 审批员较少，管理员角色无用
                ' 2 内容和模板存在专业性， 是否可以交由其他角色执行
                ' 3 命令-层级层级不高，如果层级过多则需要纳入重点考虑, 因为高层级的任意改动，都可能将业务逻辑改写


' 事情到此处，我们可以进行中场休息。 不要将【事件风暴建模】变成【头脑风暴建模】
' 建议到第二天或间隔几天再次进行会议，组内进行沟通， 并将此文档生成pdf或图片进行分发
' 【第二次事件建模】将在此文件基础创建新文件进行




' ==============================================================================================================================================================

' ==================================== 分割线 ========================= 分割线 ================== 分割线 ========================================================

' ==============================================================================================================================================================

' 本期的工作为： 1，继续完备  2，根据业务初步识别出聚合根/实体
' 可带来的思考： 1，聚合和实体的创建依据  2，非技术团队在完备完命令-事件后无法对【聚合和实体】产生兴趣

' 再次重申：【事件驱动建模】是为了得到真实可用可靠的业务模型为目的的，而业务模型构建的全过程是可用根据不同的人群进行拆分的，这样才能满足【真实世界】的种种情况
' 以往，我们都是以理想情况出发，以【人都不会拒绝对自己有好处的事务】为宗旨，但好的东西是慢的、是需要过程的，我将在这里给出以下几点【视资源而定的事件驱动建模】：
' 1 全体人员都知道。都想知道，都积极参与                                                                                               （理想情况）
' 2 仅技术团队参与。这需要增加团队之间的沟通，但本模型还是可用                                                                           （现实场景1）
' 3 仅某老员工架构师使用。 这将对以往的业务进行总结，得到优化和新的机会点， 还可以得到业务文档，我相信这么做的个人慢慢将成为该系统的中心人物    （现实场景2）
' 4 新进员工使用。 可通过识别事件快速形成真实的业务流，逐步填充全部的业务模块， 不用在成千上万行的代码中一个一个寻找，他将快速成为系统的掌握着  （真实场景3）

' 以上的真实情况是可用相互作用的，这将加快团队的形成，帮助系统快速稳健地响应变更，降低人力成本。

' 最新更新时间：2024-11-28
' 未完待续 ...

@enduml